#!/usr/bin/python
# -*- coding: utf-8 -*-
from Foundation import (CFPreferencesAppSynchronize,
                        CFPreferencesSetMultiple,
                        kCFPreferencesAnyHost,
                        kCFPreferencesCurrentUser)
import json
import os
import plistlib
import ssl
import subprocess
import urllib2

USER_AGENT = "Zentral/monolithpostinstall 0.1"

BUNDLE_ID = "ManagedInstalls"

# set by the builder
SETUP_SCRIPT_PATH = "%SETUP_SCRIPT_PATH%"
SOFTWARE_REPO_URL = "%SOFTWARE_REPO_URL%"
ENROLLMENT_SECRET = "%ENROLLMENT_SECRET%"
ENROLLMENT_URL = "%ENROLLMENT_URL%"
TLS_CA_CERT = "%TLS_CA_CERT%"
DEPNOTIFY_COMMANDS = """%DEPNOTIFY_COMMANDS%"""

# the two plists
DEFAULT_PLIST = "/Library/Preferences/ManagedInstalls.plist"
ROOT_PLIST = "/var/root{}".format(DEFAULT_PLIST)

INCLUDE_DEPNOTIFY = "%INCLUDE_DEPNOTIFY%"
DEPNOTIFY_LAUNCH_AGENT_PLIST = "/Library/LaunchAgents/io.zentral.monolith.depnotify.plist"
DEPNOTIFY_CONTROL_FILE = "/var/tmp/depnotify.log"
DEPNOTIFY_CONFIG_SOURCE_PATH = "/usr/local/zentral/monolith/menu.nomad.DEPNotify.plist"

# munki daemons
MUNKI_DAEMONS_CONFIG_FILES = [
    "/Library/LaunchDaemons/com.googlecode.munki.{}.plist".format(name)
    for name in ("managedsoftwareupdate-check",
                 "managedsoftwareupdate-install",
                 "managedsoftwareupdate-manualcheck",
                 "logouthelper")
]


def execute_setup_script():
    if SETUP_SCRIPT_PATH and os.path.exists(SETUP_SCRIPT_PATH):
        try:
            subprocess.call([SETUP_SCRIPT_PATH])
        except OSError:
            pass


def get_serial_number_and_uuid():
    output = subprocess.check_output(["ioreg", "-a", "-c", "IOPlatformExpertDevice", "-d", "2"])
    ioreg_result = plistlib.readPlistFromString(output)["IORegistryEntryChildren"][0]
    return ioreg_result["IOPlatformSerialNumber"], ioreg_result["IOPlatformUUID"]


def enroll(serial_number, uuid):
    req = urllib2.Request(ENROLLMENT_URL)
    req.add_header("User-Agent", USER_AGENT)
    req.add_header("Content-Type", "application/json")
    ctx = ssl.create_default_context(cafile=TLS_CA_CERT)
    data = json.dumps({"secret": ENROLLMENT_SECRET,
                       "serial_number": serial_number,
                       "uuid": uuid})
    resp = urllib2.urlopen(req, data=data, context=ctx)
    resp_data = json.load(resp)
    return (resp_data["token"], resp_data.get("taxonomies", []))


def update_root_prefs(serial_number, token):
    config_d = {"ClientIdentifier": serial_number,
                "SoftwareRepoURL": SOFTWARE_REPO_URL,
                "SoftwareRepoCACertificate": TLS_CA_CERT,
                "FollowHTTPRedirects": "all",
                "SuppressLoginwindowInstall": True,
                "ManifestURL": None,  # no special Manifest URL with monolith
                # force redirect via monolith for Icon and Client Resource
                "IconURL": None,
                "ClientResourceURL": None,
                "AdditionalHttpHeaders": [
                    "X-Zentral-Serial-Number: {}".format(serial_number),
                    "X-Monolith-Token: {}".format(token)
                ],
                }
    CFPreferencesSetMultiple(config_d, None,
                             BUNDLE_ID,
                             kCFPreferencesCurrentUser,  # to write in the /var/root plist
                             kCFPreferencesAnyHost)


def sync_prefs():
    CFPreferencesAppSynchronize(BUNDLE_ID)


def launch_run_once():
    subprocess.call(['/bin/launchctl', 'load',
                     '/usr/local/zentral/monolith/io.zentral.monolith.run-once.plist'])


def include_depnotify():
    return int(INCLUDE_DEPNOTIFY) == 1


def configure_depnotify(taxonomies):
    # plist (copied in place by run_once.py)
    depnotify_config = {}
    for menu_item_placement, taxonomy in zip(("Upper", "Lower"), taxonomies):
        # select box name
        depnotify_config["UIPopUpMenu{}Label".format(menu_item_placement)] = taxonomy["name"]
        # select box choices
        depnotify_config["UIPopUpMenu{}".format(menu_item_placement)] = taxonomy["tags"]
    if depnotify_config:
        plistlib.writePlist(depnotify_config, DEPNOTIFY_CONFIG_SOURCE_PATH)
    elif os.path.exists(DEPNOTIFY_CONFIG_SOURCE_PATH):
        os.unlink(DEPNOTIFY_CONFIG_SOURCE_PATH)

    # commands
    depnotify_commands = [l.strip() for l in DEPNOTIFY_COMMANDS.splitlines()]
    if depnotify_config:
        if not any("ContinueButtonRegister" in l for l in depnotify_commands):
            depnotify_commands.append("Command: ContinueButtonRegister: Register")
    else:
        depnotify_commands = [l for l in DEPNOTIFY_COMMANDS if "ContinueButtonRegister" not in l]
    with open(DEPNOTIFY_CONTROL_FILE, "wb") as f:
        f.write("\n".join(depnotify_commands))


def cleanup_depnotify():
    # config
    if os.path.exists(DEPNOTIFY_CONFIG_SOURCE_PATH):
        os.unlink(DEPNOTIFY_CONFIG_SOURCE_PATH)
    # launch agent
    if os.path.exists(DEPNOTIFY_LAUNCH_AGENT_PLIST):
        subprocess.call(["/bin/launchctl", "unload", DEPNOTIFY_LAUNCH_AGENT_PLIST])
        os.unlink(DEPNOTIFY_LAUNCH_AGENT_PLIST)


if __name__ == "__main__":
    execute_setup_script()
    serial_number, uuid = get_serial_number_and_uuid()
    token, taxonomies = enroll(serial_number, uuid)
    update_root_prefs(serial_number, token)
    sync_prefs()
    if include_depnotify():
        configure_depnotify(taxonomies)
    else:
        cleanup_depnotify()
    launch_run_once()
